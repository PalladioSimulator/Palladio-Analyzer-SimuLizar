/*
 * This simple QVTO SimuLizar reconfiguration rule clones the existing server and adds it
 * as a provider of the interface required by the client.
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/*
 * The transformation signature declares that a PRM modeltype is required as input, while a PCM
 * modeltype is transformed inplace. The PRM modeltype is referenced as 'prm' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation addClonedServer(in runtimeMeasurement : RUNTIMEMEASUREMENT,
					           in pcmAllocation : PCM_ALLOC) {
							
							
	/*
	 * Defines when the transformation is going to occur.
	 */
	property threshold : Real = 3.0;

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	

		log('SimuLizar addClonedServer Rule Transformation started');
		
		assert fatal(runtimeMeasurement.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
			
		assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
			with log ("Allocation Model is empty!");
		
		var runtimeMeasurements = runtimeMeasurement.rootObjects()[RuntimeMeasurement];

		var allocations = pcmAllocation.rootObjects()![Allocation];
		
		/*
		 * Add a server if one of the measurements is over the threshold.
		 */
		runtimeMeasurements->forEach(measurement){
			if(measurement.measuringValue > threshold){
				allocations->forEach(allocation){
					addDuplicatedServer(allocation);
				};
			}
		}
	}
	
	/*
	 * Adds a server.
	 * @param allocation PCM model which is to be transformed.
	 */
	helper addDuplicatedServer(allocation : Allocation){
		/*
		 * Elements needed for creating a connection (AssemblyConnector) between the Client and 
		 * the Server to be added.
		 */
		var requiringAssemblyContext : AssemblyContext = null;
		var requiredRole : OperationRequiredRole = null;
		var providingAssemblyContext : AssemblyContext = null;
		var providedRole : OperationProvidedRole = null;
		
		/*
		 * Traversing the PCM model ...
		 * Current state:
		 * (Left side) Client - RequiredRole  ---  AssemblyConnector  ---  ProvidedRole - Server1 (Right side)
		 *
		 * The state after the transformation:
		 *  					RequiredRole  ---  AssemblyConnector  ---  ProvidedRole - Server1 (Right side)
		 * 					  /
		 * (Left side) Client
		 *					  \
		 *                      RequiredRole  ---  AssemblyConnector  ---  ProvidedRole - Server1 (Right side)
		 */
		allocation.allocationContexts_Allocation->forEach(allocationContext) {
			
			// Find the "Client" (AllocationContext) defined in the .allocation diagram.
			if(allocationContext.assemblyContext_AllocationContext.entityName = "Client"){
				// Left side of the AssemblyConnector (Client).
				requiringAssemblyContext := allocationContext.assemblyContext_AllocationContext;
				
				/*
				 * Get to the RequiredRole of the Client.
				 * All the roles are contained in the Client's underlying RepositoryComponent.
				 */
				var repositoryComponentClient : RepositoryComponent = requiringAssemblyContext.encapsulatedComponent__AssemblyContext;
				var clientAllRequiredRoles : Bag(OperationRequiredRole) = repositoryComponentClient.requiredRoles_InterfaceRequiringEntity.oclAsType(OperationRequiredRole);
				clientAllRequiredRoles->forEach(operationRequiredRole){
					// RequiredRole on the left side of the AssemblyConnector.
					if(operationRequiredRole.entityName = "Required_process_client2"){
						requiredRole := operationRequiredRole;
					};
				}
			};
			
			// Find the "Server1" (AllocationContext) defined in the .allocation diagram. The one to be copied.
			if(allocationContext.assemblyContext_AllocationContext.entityName = "Server_1"){
				// Right side of the AssemblyConnector (Server1).
				var serverToCopyAssemblyContext : AssemblyContext = allocationContext.assemblyContext_AllocationContext;
				var serverToCopyRepositoryComponent : RepositoryComponent = serverToCopyAssemblyContext.encapsulatedComponent__AssemblyContext;
				providingAssemblyContext := new AssemblyContext(serverToCopyRepositoryComponent);
				
				/*
				 * Get to the ProvidedRole of the Server1.
				 * All the roles are contained in the Server1's underlying RepositoryComponent.
				 */
				var serverAllProvidedRoles : Bag(OperationProvidedRole) = serverToCopyRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
				serverAllProvidedRoles->forEach(operationProvidedRole){
					// ProvidedRole on the right side of the AssemblyConnector.
					if(operationProvidedRole.entityName = "Provided_process_server_1"){
						providedRole := operationProvidedRole;
					};
				}
			};
			
			// Finally, creating the AssemblyConnector once all the necessary elements are cloned and collected.
			if(providingAssemblyContext <> null and requiringAssemblyContext <> null){
				new AssemblyConnector(requiringAssemblyContext, requiredRole, providedRole, providingAssemblyContext);
			}
		}
	};
	
	constructor AssemblyConnector :: AssemblyConnector(requiringAssemblyContext : AssemblyContext,requiredRole:OperationRequiredRole, providedRole: OperationProvidedRole, providingAssemblyContext : AssemblyContext){
		log ('Start of assemblyConnector creation');
		var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
		var system : System := allocation.system_Allocation![System];
		entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
		//id := requiringAssemblyContext.id + "_" + providingAssemblyContext.id;
		providingAssemblyContext_AssemblyConnector := providingAssemblyContext;
		requiringAssemblyContext_AssemblyConnector := requiringAssemblyContext;
		providedRole_AssemblyConnector := providedRole;
		requiredRole_AssemblyConnector := requiredRole;
		parentStructure__Connector := system;
	}
	
	constructor AssemblyContext :: AssemblyContext(bc : RepositoryComponent) {
		entityName := "Assembly_"+bc.entityName;
		encapsulatedComponent__AssemblyContext := bc;
		var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
		var system : System := allocation.system_Allocation![System];
		parentStructure__AssemblyContext := system;
	}
}