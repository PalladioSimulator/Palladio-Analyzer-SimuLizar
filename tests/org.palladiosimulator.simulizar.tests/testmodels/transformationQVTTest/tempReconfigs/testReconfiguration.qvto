/*
 * This reconfiguration is used to automatically test the QVTO reconfiguration.
 * It is used for a deterministic model and reconfigures deterministically.
 * The reconfiguration changes the parameter ClosedWorkload.population.
 * In the unit test, the response time is then tracked.
 */

import org.palladiosimulator.simulizar.action.repository.black.SimulationStateLibrary;

modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';


transformation TestQVTO(		in prm : PRM,
							inout pcmResourceEnvironment : PCM_RES_ENV) {
							
							
	// Define Threshold and Scale Down
	property reconfigUpTime : Real = 2000.0;
	property reconfigDownTime : Real = 4000.0;

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
		log('QVTO ProcessingRate Reconfiguration Test started');
		assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
//		pcmUsage.objectsOfType(ClosedWorkload)-> map reconfigureClosedWorkload(1);
//			log("Reconfigure Population from Closed Workload 2.0 -> 1.0");
		-- mapping from 2.0 to 1.0 between 4000 and 6000
	
		var resourceSpecifications = pcmResourceEnvironment.objectsOfType(ProcessingResourceSpecification);
		-- mapping from 1.0 to 2.0 between 2000 and 4000
		if ( getSimulationTime() > reconfigUpTime and getSimulationTime() < reconfigDownTime) then {
			log(getSimulationTime().toString() +  " größer 2000, kleiner 4000");
			resourceSpecifications-> map reconfigureProcessingRate(2);
			log("Reconfigure ProcessingRate from 1.0 -> 2.0");
		} endif;
		
		if ( getSimulationTime() > reconfigDownTime) then {
			log(getSimulationTime().toString() +  " größer 4000");
			resourceSpecifications-> map reconfigureProcessingRate(1);
			log("Reconfigure ProcessingRate from 1.0 -> 2.0");
		} endif;		
		
	}
	
	mapping inout ProcessingResourceSpecification::reconfigureProcessingRate(newValue : Real) : ProcessingResourceSpecification
	{
		processingRate_ProcessingResourceSpecification.specification := newValue.toString();
		log("Processing Rate Reconfigure DONE!");
	}
}