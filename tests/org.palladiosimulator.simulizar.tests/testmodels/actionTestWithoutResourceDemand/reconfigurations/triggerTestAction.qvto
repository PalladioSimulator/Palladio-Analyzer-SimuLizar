/*
 * This QVTO transformation triggers an action to scale a worklaod's population.
 *
 */
import org.palladiosimulator.simulizar.action.repository.black.SimulationStateLibrary;

modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype ACTIONS uses 'http://simulizar.palladiosimulator.org/Actions/Core/1.1';
modeltype ACTION_PARAM uses 'http://simulizar.palladiosimulator.org/Actions/Parameter/1.1';
modeltype ACTION_CONTEXT uses 'http://simulizar.palladiosimulator.org/Actions/Context/1.1';
modeltype INSTANCE uses 'http://simulizar.palladiosimulator.org/Actions/Instance/1.1';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';


transformation triggerAction(	in prm : PRM,
							inout pcmUsage : PCM_USAGE,
							inout actionsInput : ACTIONS,
							out roleSets : INSTANCE
							) {
				
	property adaptationBehaviorRepository : AdaptationBehaviorRepository = actionsInput.rootObjects()[core::AdaptationBehaviorRepository]->any(true);
	property usageScenarioId : String = '_LPnI8CHdEd6lJo4DCALHMw';
	property reconfigUpTime : Real = 2000.0;
	configuration property resourceTableManager : IResourceTableManager;
	property roleTypeId : String = '_QGoXJQlYEe2py52lapYZiQ';
	property adaptationBehaviorId : String = '_Gs5npQlYEe2py52lapYZiQ';
	
	
	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 * From here the action is triggered and the roles are filled with parameters.
	 * The next qvto script that is executed are the preconditions.
	 * After that the adaptation steps are executed.
	 * These qvto-scripts can be found in the action repository.
	 */
	main() {
		assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
			with log ("No Measurements found!");
		assert fatal(pcmUsage.rootObjects()[UsageModel]->size() > 0)
			with log ("Usage Model is empty!");

		var usageModel : UsageModel := pcmUsage.rootObjects()[UsageModel]->any(true);
		var usageScenarios = usageModel.allSubobjectsOfType(UsageScenario);
		var usageScenario : UsageScenario := null;
		
		usageScenarios-> forEach(scenario)
		{
			if ( scenario.id = usageScenarioId ) then {
				usageScenario := scenario;
			} endif;
		};
		
		assert fatal(usageScenario != null)
			with log("No UsageScenario with given id exists to apply desired action.");
			
			
		if ( getSimulationTime() > reconfigUpTime and getSimulationTime() < reconfigUpTime+2.0 ) then {
			log("Start Action");
			reconfigureUsageModelsWorkload(2, usageScenario);
		} endif;
	}
	
	helper reconfigureUsageModelsWorkload(newPopulation : Integer, usageScenario : UsageScenario) : Boolean {
		var scalePopulation : AdaptationBehavior := adaptationBehaviorRepository.actions->select(a | a.id = adaptationBehaviorId)->any(true).oclAsType(AdaptationBehavior);		
		var roleSet : RoleSet := object RoleSet@roleSets {
					roles += object Role {
					roleType := scalePopulation.getRoleTypeById(roleTypeId);
					value := usageScenario.oclAsType(EObject);
					};	
				};
		
		var variableUsages := object ControllerCallInputVariableUsageCollection {
					controllerCallInputVariableUsages;
				};
		var context := object ExecutionContext {};
		var res := scalePopulation.execute(roleSet, variableUsages, resourceTableManager);
		return false;
	}
	
	query AdaptationBehavior::getRoleTypeById(id : String) : RoleType {
		return self.involvedRoles->select(r | r.id = id)->any(true);
	}
	
}